[{"C:\\Users\\lst\\Documents\\translation_app\\src\\index.js":"1","C:\\Users\\lst\\Documents\\translation_app\\src\\App.js":"2","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\Notes.js":"3","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\Create.js":"4","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\CreateNote.js":"5","C:\\Users\\lst\\Documents\\translation_app\\src\\components\\Layout.js":"6","C:\\Users\\lst\\Documents\\translation_app\\src\\context\\notes.context.jsx":"7","C:\\Users\\lst\\Documents\\translation_app\\src\\components\\NoteCard.js":"8","C:\\Users\\lst\\Documents\\translation_app\\src\\services\\translation.js":"9"},{"size":472,"mtime":1662166687968,"results":"10","hashOfConfig":"11"},{"size":1188,"mtime":1662166687966,"results":"12","hashOfConfig":"11"},{"size":1045,"mtime":1662166687969,"results":"13","hashOfConfig":"11"},{"size":3473,"mtime":1662199688039,"results":"14","hashOfConfig":"11"},{"size":3041,"mtime":1662166687969,"results":"15","hashOfConfig":"11"},{"size":3365,"mtime":1662200071021,"results":"16","hashOfConfig":"11"},{"size":1377,"mtime":1662166687967,"results":"17","hashOfConfig":"11"},{"size":1613,"mtime":1662166687967,"results":"18","hashOfConfig":"11"},{"size":403,"mtime":1662166687970,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"nu23qm",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\lst\\Documents\\translation_app\\src\\index.js",[],["46","47"],"C:\\Users\\lst\\Documents\\translation_app\\src\\App.js",["48"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Notes from \"./pages/Notes\";\r\nimport Create from \"./pages/Create\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { purple } from \"@material-ui/core/colors\";\r\nimport Layout from \"./components/Layout\";\r\nimport { NoteFormProvider } from \"./context/notes.context\";\r\nimport CreateNote from \"./pages/CreateNote\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#fefefe\",\r\n    },\r\n    secondary: purple,\r\n  },\r\n  typography: {\r\n    fontFamily: \"Quicksand\",\r\n    fontWeightLight: 400,\r\n    fontWeightRegular: 500,\r\n    fontWeightMedium: 600,\r\n    fontWeightBold: 700,\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <Layout>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Notes />\r\n            </Route>\r\n            <Route path=\"/create\">\r\n              <NoteFormProvider>\r\n                <CreateNote />\r\n              </NoteFormProvider>\r\n            </Route>\r\n          </Switch>\r\n        </Layout>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\Notes.js",["49"],"import React, { useEffect, useState } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport Masonry from 'react-masonry-css'\r\nimport NoteCard from '../components/NoteCard'\r\n\r\nexport default function Notes() {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('/pcm_en')\r\n      .then(res => res.json())\r\n      .then(data => setNotes(data))\r\n  }, [])\r\n\r\n  const handleDelete = async (id) => {\r\n    await fetch('/pcm_en/' + id, {\r\n      method: 'DELETE'\r\n    })\r\n    const newNotes = notes.filter(note => note.id != id)\r\n    setNotes(newNotes)\r\n  }\r\n\r\n  const breakpoints = {\r\n    default: 3,\r\n    1100: 2,\r\n    700: 1\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Masonry\r\n        breakpointCols={breakpoints}\r\n        className=\"my-masonry-grid\"\r\n        columnClassName=\"my-masonry-grid_column\">\r\n        {notes.map(note => (\r\n          <div key={note.id}>\r\n            <NoteCard note={note} handleDelete={handleDelete} />\r\n          </div>\r\n        ))}\r\n      </Masonry>\r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\Create.js",["50","51"],"import React, { useState } from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles({\r\n  field: {\r\n    marginTop: 20,\r\n    marginBottom: 20,\r\n    display: 'block'\r\n  }\r\n})\r\n\r\nexport default function Create() {\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n  const [title, setTitle] = useState('')\r\n  const [details, setDetails] = useState('')\r\n  const [titleError, setTitleError] = useState(false)\r\n  const [detailsError, setDetailsError] = useState(false)\r\n  const [category, setCategory] = useState('money')\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    setTitleError(false)\r\n    setDetailsError(false)\r\n\r\n    if (title == '') {\r\n      setTitleError(true)\r\n    }\r\n    if (details == '') {\r\n      setDetailsError(true)\r\n    }\r\n    if (title && details) {\r\n      fetch('http://localhost:8000/notes', {\r\n        method: 'POST',\r\n        headers: {\"Content-type\": \"application/json\"},\r\n        body: JSON.stringify({ title, details, category })\r\n      }).then(() => history.push('/'))\r\n    } \r\n  }\r\n\r\n  return (\r\n    <Container size=\"sm\">\r\n      <Typography\r\n        variant=\"h6\" \r\n        color=\"textSecondary\"\r\n        component=\"h2\"\r\n        gutterBottom\r\n      >\r\n        Create a New Note\r\n      </Typography>\r\n      \r\n      <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <TextField className={classes.field}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          label=\"Note Title\" \r\n          variant=\"outlined\" \r\n          color=\"secondary\" \r\n          fullWidth\r\n          required\r\n          error={titleError}\r\n        />\r\n        <TextField className={classes.field}\r\n          onChange={(e) => setDetails(e.target.value)}\r\n          label=\"Please Type the PCM Text Here\"\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          multiline\r\n          rows={4}\r\n          fullWidth\r\n          required\r\n          error={detailsError}\r\n        />\r\n\r\n        {/* <Radio value=\"hello\" />\r\n        <Radio value=\"goodbye\" /> */}\r\n\r\n        <FormControl className={classes.field}>\r\n          <FormLabel>Note Category</FormLabel>\r\n          <RadioGroup value={category} onChange={(e) => setCategory(e.target.value)}>\r\n            <FormControlLabel value=\"money\" control={<Radio />} label=\"Ernie\" />\r\n            <FormControlLabel value=\"todos\" control={<Radio />} label=\"Merel\" />\r\n            <FormControlLabel value=\"reminders\" control={<Radio />} label=\"Pin-Jie\" />\r\n            <FormControlLabel value=\"work\" control={<Radio />} label=\"Muhammed\" />\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Button\r\n          type=\"submit\" \r\n          color=\"secondary\" \r\n          variant=\"contained\"\r\n          endIcon={<KeyboardArrowRightIcon />}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n\r\n      \r\n    </Container>\r\n  )\r\n}\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\pages\\CreateNote.js",["52","53"],"import React, { useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useNoteForm from \"../context/notes.context\";\r\n\r\nconst useStyles = makeStyles({\r\n  field: {\r\n    marginTop: 20,\r\n    marginBottom: 20,\r\n    display: \"block\",\r\n  },\r\n});\r\n\r\nconst CreateNote = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { note, noteFormChanged, handleSubmit, titleError, detailsError } =\r\n    useNoteForm();\r\n\r\n  return (\r\n    <Container size=\"sm\">\r\n      <Typography\r\n        variant=\"h6\"\r\n        color=\"textSecondary\"\r\n        component=\"h2\"\r\n        gutterBottom\r\n      >\r\n        Create a New Note\r\n      </Typography>\r\n\r\n      <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <TextField\r\n          className={classes.field}\r\n          onChange={(e) => noteFormChanged(\"title\", e.target.value)}\r\n          label=\"Note Title\"\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          fullWidth\r\n          required\r\n          error={titleError}\r\n        />\r\n        <TextField\r\n          className={classes.field}\r\n          onChange={(e) => noteFormChanged(\"details\", e.target.value)}\r\n          label=\"Details\"\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          multiline\r\n          rows={4}\r\n          fullWidth\r\n          required\r\n          error={detailsError}\r\n        />\r\n\r\n        {/* <Radio value=\"hello\" />\r\n        <Radio value=\"goodbye\" /> */}\r\n\r\n        <FormControl className={classes.field}>\r\n          <FormLabel>Note Category</FormLabel>\r\n          <RadioGroup\r\n            value={note.category}\r\n            onChange={(e) => noteFormChanged(\"category\", e.target.value)}\r\n          >\r\n            <FormControlLabel value=\"money\" control={<Radio />} label=\"Money\" />\r\n            <FormControlLabel value=\"todos\" control={<Radio />} label=\"Todos\" />\r\n            <FormControlLabel\r\n              value=\"reminders\"\r\n              control={<Radio />}\r\n              label=\"Reminders\"\r\n            />\r\n            <FormControlLabel value=\"work\" control={<Radio />} label=\"Work\" />\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          endIcon={<KeyboardArrowRightIcon />}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CreateNote;\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\components\\Layout.js",["54"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { AddCircleOutlineOutlined, SubjectOutlined } from '@material-ui/icons'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { format } from 'date-fns'\r\nimport Avatar from '@material-ui/core/Avatar'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    page: {\r\n      background: '#f9f9f9',\r\n      width: '100%',\r\n      padding: theme.spacing(3),\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    active: {\r\n      background: '#f4f4f4'\r\n    },\r\n    title: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    appBar: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n    date: {\r\n      flexGrow: 1\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    avatar: {\r\n      marginLeft: theme.spacing(2)\r\n    }\r\n  }\r\n})\r\n\r\nexport default function Layout({ children }) {\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n\r\n  const menuItems = [\r\n    { \r\n      text: 'My Notes', \r\n      icon: <SubjectOutlined color=\"secondary\" />, \r\n      path: '/' \r\n    },\r\n    { \r\n      text: 'Create Note', \r\n      icon: <AddCircleOutlineOutlined color=\"secondary\" />, \r\n      path: '/create' \r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* app bar */}\r\n      <AppBar \r\n        position=\"fixed\" \r\n        className={classes.appBar}\r\n        elevation={0}\r\n        color=\"primary\"\r\n      >\r\n        <Toolbar>\r\n          <Typography className={classes.date}>\r\n            Today is the {format(new Date(), 'do MMMM Y')}\r\n          </Typography>\r\n          <Typography>Naija</Typography>\r\n          <Avatar className={classes.avatar} src=\"/pidgin.png\" />\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* side drawer */}\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{ paper: classes.drawerPaper }}\r\n        anchor=\"left\"\r\n      >\r\n        <div>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            PCM Translation Models\r\n          </Typography>\r\n        </div>\r\n\r\n        {/* links/list section */}\r\n        <List>\r\n          {menuItems.map((item) => (\r\n            <ListItem \r\n              button \r\n              key={item.text} \r\n              onClick={() => history.push(item.path)}\r\n              className={location.pathname == item.path ? classes.active : null}\r\n            >\r\n              <ListItemIcon>{item.icon}</ListItemIcon>\r\n              <ListItemText primary={item.text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        \r\n      </Drawer>\r\n\r\n      {/* main content */}\r\n      <div className={classes.page}>\r\n        <div className={classes.toolbar}></div>\r\n        { children }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\context\\notes.context.jsx",["55","56","57"],"import React, { createContext, useContext, useMemo, useState } from \"react\";\r\nimport { translateNote } from \"../services/translation\";\r\n\r\nconst NoteFormContext = createContext({});\r\n\r\nexport const NoteFormProvider = ({ children }) => {\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    details: \"\",\r\n    category: \"money\",\r\n  });\r\n  const [titleError, setTitleError] = useState(false);\r\n  const [detailsError, setDetailsError] = useState(false);\r\n\r\n  const noteFormChanged = (name, value) => {\r\n    setNote((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setTitleError(false);\r\n    setDetailsError(false);\r\n    console.log(\"Are you here\");\r\n    if (note.title == \"\") {\r\n      setTitleError(true);\r\n    }\r\n    if (note.details == \"\") {\r\n      setDetailsError(true);\r\n    }\r\n    if (note.title && note.details) {\r\n      await translateNote(note);\r\n    }\r\n  };\r\n\r\n  const memoedValue = useMemo(\r\n    () => ({\r\n      note,\r\n      titleError,\r\n      detailsError,\r\n      noteFormChanged,\r\n      handleSubmit,\r\n    }),\r\n    [note]\r\n  );\r\n  return (\r\n    <NoteFormContext.Provider value={memoedValue}>\r\n      {children}\r\n    </NoteFormContext.Provider>\r\n  );\r\n};\r\n\r\nexport default function useNoteForm() {\r\n  return useContext(NoteFormContext);\r\n}\r\n","C:\\Users\\lst\\Documents\\translation_app\\src\\components\\NoteCard.js",["58","59","60"],"import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteOutlined from '@material-ui/icons/DeleteOutlined'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { yellow, green, pink, blue } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: (note) => {\r\n      if (note.category == 'work') {\r\n        return yellow[700]\r\n      }\r\n      if (note.category == 'money') {\r\n        return green[500]\r\n      }\r\n      if (note.category == 'todos') {\r\n        return pink[500]\r\n      }\r\n      return blue[500]\r\n    },\r\n  }\r\n})\r\n\r\nexport default function NoteCard({ note, handleDelete }) {\r\n  const classes = useStyles(note)\r\n\r\n  return (\r\n    <div>\r\n      <Card elevation={1}>\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar className={classes.avatar}>\r\n              {note.category[0].toUpperCase()}\r\n            </Avatar>}\r\n          action={\r\n            <IconButton onClick={() => handleDelete(note.id)}>\r\n              <DeleteOutlined />\r\n            </IconButton>\r\n          }\r\n          title={note.title}\r\n          subheader={note.category}\r\n        />\r\n        <CardContent>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            { note.details }\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}","C:\\Users\\lst\\Documents\\translation_app\\src\\services\\translation.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":19,"column":51,"nodeType":"71","messageId":"72","endLine":19,"endColumn":53},{"ruleId":"69","severity":1,"message":"73","line":37,"column":15,"nodeType":"71","messageId":"72","endLine":37,"endColumn":17},{"ruleId":"69","severity":1,"message":"73","line":40,"column":17,"nodeType":"71","messageId":"72","endLine":40,"endColumn":19},{"ruleId":"65","severity":1,"message":"74","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"75","line":26,"column":9,"nodeType":"67","messageId":"68","endLine":26,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":110,"column":44,"nodeType":"71","messageId":"72","endLine":110,"endColumn":46},{"ruleId":"69","severity":1,"message":"73","line":28,"column":20,"nodeType":"71","messageId":"72","endLine":28,"endColumn":22},{"ruleId":"69","severity":1,"message":"73","line":31,"column":22,"nodeType":"71","messageId":"72","endLine":31,"endColumn":24},{"ruleId":"76","severity":1,"message":"77","line":47,"column":5,"nodeType":"78","endLine":47,"endColumn":11,"suggestions":"79"},{"ruleId":"69","severity":1,"message":"73","line":15,"column":25,"nodeType":"71","messageId":"72","endLine":15,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":18,"column":25,"nodeType":"71","messageId":"72","endLine":18,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":21,"column":25,"nodeType":"71","messageId":"72","endLine":21,"endColumn":27},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Create' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useState' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'detailsError', 'handleSubmit', and 'titleError'. Either include them or remove the dependency array.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [detailsError, handleSubmit, note, titleError]",{"range":"85","text":"86"},[1153,1159],"[detailsError, handleSubmit, note, titleError]"]